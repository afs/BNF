/* EBNFParser.java */
/* Generated By:JavaCC: Do not edit this line. EBNFParser.java */
package org.seaborne.bnf.parser.javacc;

import org.seaborne.bnf.parser.*;

public class EBNFParser extends BNFParser implements EBNFParserConstants {

  final public void Unit() throws ParseException {
    Grammar();
}

  final public void EOL() throws ParseException {
    jj_consume_token(EOL);
}

  final public void Grammar() throws ParseException {Rule rule;
    BlankLines();
startGrammar();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACK:
      case NONTERMINAL:
      case WORD:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      rule = Rule();
emitRule(rule);
      BlankLines();
    }
    jj_consume_token(0);
finishGrammar();
}

  final public Rule Rule() throws ParseException {Identifier identifier ; Expression expr; Rule rule; String label = null;
startRule();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACK:{
      label = Label();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
    identifier = Identifier();
    jj_consume_token(ASSIGN);
    expr = Expression();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EOL:{
      EOL();
      break;
      }
    case 0:{
      jj_consume_token(0);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
rule = createRule(label, identifier, expr);
      finishRule();
{if ("" != null) return rule;}
    throw new Error("Missing return statement in function");
}

  final public void BlankLines() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EOL:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      EOL();
    }
}

  final public String Label() throws ParseException {String str = "";
    jj_consume_token(LBRACK);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INTEGER:
    case WORD:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INTEGER:{
        str = Integer();
        break;
        }
      case WORD:{
        str = Word();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(RBRACK);
{if ("" != null) return str;}
    throw new Error("Missing return statement in function");
}

// LHS
  final public Identifier Identifier() throws ParseException {Token t; String str;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NONTERMINAL:{
      t = jj_consume_token(NONTERMINAL);
{if ("" != null) return createNonTerminal(t.image);}
      break;
      }
    case WORD:{
      str = Word();
{if ("" != null) return createWord(str);}
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Expression Expression() throws ParseException {Expression expr;
startExpression() ;
    expr = Alternatives();
finishExpression() ;
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
}

  final public Expression Alternatives() throws ParseException {Expression expr ;
startAlternatives() ;
    expr = Sequence();
emitAlternativesElement(expr);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      jj_consume_token(OR);
      expr = Sequence();
emitAlternativesElement(expr);
    }
expr = collectedAlternatives();
finishAlternatives() ;
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
}

// At least one element.
  final public Expression Sequence() throws ParseException {Expression expr;
startSequence() ;
    label_4:
    while (true) {
      expr = Unary();
emitSequenceElement(expr);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:
      case LBRACK:
      case NONTERMINAL:
      case QUOTED_STRING:
      case HEX_CHAR:
      case WORD:{
        ;
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        break label_4;
      }
    }
expr = collectedSequence();
      finishSequence() ;
      {if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
}

  final public Expression Unary() throws ParseException {Expression expr; Token mod = null;
    expr = Primary();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STAR:
    case PLUS:
    case QUERY:
    case LBRACE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case QUERY:{
        jj_consume_token(QUERY);
expr = createExprZeroOrOne(expr);
        break;
        }
      case STAR:{
        jj_consume_token(STAR);
expr = createExprZeroOrMore(expr);
        break;
        }
      case PLUS:{
        jj_consume_token(PLUS);
expr = createExprOneOrMore(expr);
        break;
        }
      case LBRACE:{
        expr = Repeat(expr);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
{if ("" != null) return expr;}
    throw new Error("Missing return statement in function");
}

  final public Expression Repeat(Expression expr) throws ParseException {String str1 = null; String str2 = null;
    jj_consume_token(LBRACE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STAR:
    case INTEGER:{
      str1 = RepeatCount();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        jj_consume_token(COMMA);
str2 = "";
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STAR:
        case INTEGER:{
          str2 = RepeatCount();
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      break;
      }
    case COMMA:{
      jj_consume_token(COMMA);
str1 = "";
      str2 = RepeatCount();
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(RBRACE);
{if ("" != null) return createExprRepeat(expr, str1, str2);}
    throw new Error("Missing return statement in function");
}

  final public String RepeatCount() throws ParseException {Token t; String str;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STAR:{
      t = jj_consume_token(STAR);
{if ("" != null) return t.image;}
      break;
      }
    case INTEGER:{
      str = Integer();
{if ("" != null) return str;}
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Expression Primary() throws ParseException {String str; Token t; Expression expr;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NONTERMINAL:{
      t = jj_consume_token(NONTERMINAL);
{if ("" != null) return createNonTerminal(t.image);}
      break;
      }
    case WORD:{
      str = Word();
{if ("" != null) return createWord(str);}
      break;
      }
    case QUOTED_STRING:{
      t = jj_consume_token(QUOTED_STRING);
{if ("" != null) return createQuotedString(t.image);}
      break;
      }
    case LPAREN:{
      jj_consume_token(LPAREN);
      expr = Expression();
      jj_consume_token(RPAREN);
{if ("" != null) return createPrimary(expr);}
      break;
      }
    case HEX_CHAR:{
      expr = Character();
{if ("" != null) return expr;}
      break;
      }
    case LBRACK:{
      expr = CharacterRange();
{if ("" != null) return expr;}
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public Expression Character() throws ParseException {Token t;
    t = jj_consume_token(HEX_CHAR);
{if ("" != null) return createCharacter(t.image);}
    throw new Error("Missing return statement in function");
}

  final public Expression CharacterRange() throws ParseException {String s1; String s2; boolean isNegative = false;
    jj_consume_token(LBRACK);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CARAT:{
      jj_consume_token(CARAT);
isNegative = true;
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
    s1 = RangeElement();
    jj_consume_token(34);
    s2 = RangeElement();
    jj_consume_token(RBRACK);
{if ("" != null) return createCharacterRange(s1, s2, isNegative);}
    throw new Error("Missing return statement in function");
}

  final public String RangeElement() throws ParseException {String str;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case HEX_CHAR:{
      str = HexChar();
{if ("" != null) return str;}
      break;
      }
    case WORD:{
      str = Word();
{if ("" != null) return wordToRangeChar(str, token.beginLine, token.beginColumn);}
      break;
      }
    case INTEGER:{
      str = Integer();
{if ("" != null) return wordToRangeChar(str, token.beginLine, token.beginColumn);}
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// Abstract away from the concrete token.

// String WS() : { }
// {
// }
  final public 


String HexChar() throws ParseException {Token t; String str;
    t = jj_consume_token(HEX_CHAR);
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
}

  final public String Word() throws ParseException {Token t; String str;
    t = jj_consume_token(WORD);
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
}

  final public String Integer() throws ParseException {Token t; String str;
    t = jj_consume_token(INTEGER);
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public EBNFParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x81000,0x1000,0x9,0x8,0x40000000,0x40000000,0x80000,0x20,0x2081400,0x42c0,0x42c0,0x40000040,0x100,0x40000140,0x40000040,0x2081400,0x40000,0x40000000,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x2,0x0,0x0,0x0,0x2,0x2,0x2,0x0,0x3,0x0,0x0,0x0,0x0,0x0,0x0,0x3,0x0,0x3,};
	}

  /** Constructor with InputStream. */
  public EBNFParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public EBNFParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new EBNFParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public EBNFParser(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new EBNFParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new EBNFParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public EBNFParser(EBNFParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(EBNFParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 18; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[35];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 18; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 35; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

                                           }
